{
    "config": {
        "axis": {
            "default": 1,
            "doc": "Allows for daisy chained controllers",
            "type": "int"
        },
        "baud_rate": {
            "default": 57600,
            "type": "int"
        },
        "limits": {
            "default": [
                -Infinity,
                Infinity
            ],
            "doc": "Configuration limits are strictly optional.",
            "items": "float",
            "type": "array"
        },
        "make": {
            "default": "newport",
            "type": [
                "null",
                "string"
            ]
        },
        "model": {
            "default": "SMC100",
            "type": [
                "null",
                "string"
            ]
        },
        "out_of_limits": {
            "default": "closest",
            "doc": "Control behavior of daemon when set_position is given a value outside of limits.",
            "name": "out_of_limits",
            "symbols": [
                "closest",
                "ignore",
                "error"
            ],
            "type": "enum"
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "type": "int"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "serial_port": {
            "type": "string"
        },
        "units": {
            "default": "mm",
            "doc": "Units for the motor attatched to the controller",
            "type": "string"
        }
    },
    "doc": "Daemon for the Newport smc100-[CC|PP] controllers\n",
    "hardware": [
        "newport:mfa-cc",
        "newport:smc100cc",
        "newport:smc100pp"
    ],
    "installation": {
        "PyPI": "https://pypi.org/project/yaqd-newport"
    },
    "links": {
        "bugtracker": "https://gitlab.com/yaq/yaqd-newport/issues",
        "manufacturer": "https://www.newport.com/f/smc100-single-axis-dc-or-stepper-motion-controller",
        "source": "https://gitlab.com/yaq/yaqd-newport/"
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "request": [],
            "response": "boolean"
        },
        "direct_serial_write": {
            "doc": "Expose direct access to the serial port to clients.\n\nThis should not be encouraged for normal use, but may be very important for debugging.\nIf a device is expected to return data, it should be logged at the INFO level, not returned to the client.\nThis is done to allow long tasks to be run asynchronously, and to explicitly discourage use of this method except when debugging.\nSetting `busy` to true is encouraged, but individual daemon writers should consider their own use case.\n",
            "request": [
                {
                    "name": "message",
                    "type": "bytes"
                }
            ],
            "response": "null"
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "request": [],
            "response": "string"
        },
        "get_destination": {
            "doc": "Get current daemon destination.",
            "request": [],
            "response": "float"
        },
        "get_limits": {
            "doc": "Get daemon limits.Limits will be the <a href='https://en.wikipedia.org/wiki/Intersection_(set_theory)'>intersection</a> of config limits and driver limits (when appliciable).",
            "request": [],
            "response": {
                "items": "float",
                "type": "array"
            }
        },
        "get_position": {
            "doc": "Get current daemon position.",
            "request": [],
            "response": "float"
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "request": [],
            "response": "string"
        },
        "get_units": {
            "doc": "Get units of daemon. These units apply to the position and destination fields.",
            "request": [],
            "response": [
                "null",
                "string"
            ]
        },
        "home": {
            "doc": "Initiates the homing procedure.\nThe daemon will report as busy during the homing procedure.\n After the homing procedure is complete, the daemon will return to the current destination.\n",
            "request": [],
            "response": "null"
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "in_limits": {
            "doc": "Check if a given position is within daemon limits.",
            "request": [
                {
                    "name": "position",
                    "type": "float"
                }
            ],
            "response": "boolean"
        },
        "set_position": {
            "doc": "Give the daemon a new destination, and begin motion towards that destination.",
            "request": [
                {
                    "name": "position",
                    "type": "float"
                }
            ],
            "response": "null"
        },
        "set_relative": {
            "doc": "Give the daemon a new destination relative to its current position. Daemon will immediately begin motion towards new destination. Returns new destination.",
            "request": [
                {
                    "name": "distance",
                    "type": "float"
                }
            ],
            "response": "float"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        }
    },
    "protocol": "newport-smc100",
    "requires": [],
    "state": {
        "destination": {
            "default": NaN,
            "type": "float"
        },
        "error_code": {
            "default": "0000",
            "doc": "Four digit code describing error conditions in the Tell Status (TS) command.",
            "type": "string"
        },
        "hw_limits": {
            "default": [
                -Infinity,
                Infinity
            ],
            "items": "float",
            "type": "array"
        },
        "position": {
            "default": NaN,
            "type": "float"
        },
        "status": {
            "default": "",
            "doc": "Device status, translated into text from the Tell Status (TS) command.",
            "type": "string"
        }
    },
    "trait": "uses-serial",
    "traits": [
        "has-limits",
        "uses-serial",
        "uses-uart",
        "is-homeable",
        "is-daemon",
        "has-position"
    ]
}
